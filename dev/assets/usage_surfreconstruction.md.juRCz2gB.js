import{_ as n,C as o,c as p,o as d,aA as a,j as e,G as t,a as l,w as r}from"./chunks/framework.Dw7Yg_2H.js";const v=JSON.parse('{"title":"Surface Reconstruction","description":"","frontmatter":{},"headers":[],"relativePath":"usage/surfreconstruction.md","filePath":"usage/surfreconstruction.md","lastUpdated":null}'),h={name:"usage/surfreconstruction.md"},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""};function y(T,i,b,_,E,m){const s=o("Badge");return d(),p("div",null,[i[20]||(i[20]=a('<h1 id="Surface-Reconstruction" tabindex="-1">Surface Reconstruction <a class="header-anchor" href="#Surface-Reconstruction" aria-label="Permalink to &quot;Surface Reconstruction {#Surface-Reconstruction}&quot;">​</a></h1><p>Here we will detect the surface points of the particle model and construct a closed surface through them. This functionality heavily relies on <a href="https://github.com/InteractiveComputerGraphics/splashsurf" target="_blank" rel="noreferrer">splashsurf</a>. We need to first convert the particle information to a <code>.ply</code> file(s), which will be used as input for <code>splashsurf</code>.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><ol><li><p>Please make sure <code>splashsurf</code> is on your env and julia is able to find it.</p></li><li><p>All the HDF5 files are generated by MaterialPointSolver.jl, custom HDF5 does not work.</p></li></ol></div><h2 id="Convert-data-into-.ply-files" tabindex="-1">Convert data into <code>.ply</code> file(s) <a class="header-anchor" href="#Convert-data-into-.ply-files" aria-label="Permalink to &quot;Convert data into `.ply` file(s) {#Convert-data-into-.ply-files}&quot;">​</a></h2>',4)),e("details",c,[e("summary",null,[i[0]||(i[0]=e("a",{id:"MaterialPointVisualizer.particle2ply-Tuple{Matrix}",href:"#MaterialPointVisualizer.particle2ply-Tuple{Matrix}"},[e("span",{class:"jlbinding"},"MaterialPointVisualizer.particle2ply")],-1)),i[1]||(i[1]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[3]||(i[3]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">particle2ply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coords</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; output_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;coord.ply&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description:</strong></p><p>Convert the particle coordinates (single array) to a PLY file.</p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:r(()=>i[2]||(i[2]=[e("a",{href:"https://github.com/LandslideSIM/MaterialPointVisualizer.jl/blob/8ec80fa798f3f6bae8980387e60f41ff4b2a1a34/src/particle2surf.jl#L16-L22",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",u,[e("summary",null,[i[4]||(i[4]=e("a",{id:"MaterialPointVisualizer.particle2ply-Union{Tuple{T2}, Tuple{T1}, Tuple{DeviceArgs2D{T1, T2}, DeviceParticle2D{T1, T2}}} where {T1, T2}",href:"#MaterialPointVisualizer.particle2ply-Union{Tuple{T2}, Tuple{T1}, Tuple{DeviceArgs2D{T1, T2}, DeviceParticle2D{T1, T2}}} where {T1, T2}"},[e("span",{class:"jlbinding"},"MaterialPointVisualizer.particle2ply")],-1)),i[5]||(i[5]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[7]||(i[7]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">particle2ply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DeviceArgs2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DeviceParticle2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description:</strong></p><p>Convert the particle coordinates (data from MaterialPointSolver.jl) to a PLY file.</p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:r(()=>i[6]||(i[6]=[e("a",{href:"https://github.com/LandslideSIM/MaterialPointVisualizer.jl/blob/8ec80fa798f3f6bae8980387e60f41ff4b2a1a34/src/particle2surf.jl#L43-L49",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",k,[e("summary",null,[i[8]||(i[8]=e("a",{id:"MaterialPointVisualizer.particle2ply-Union{Tuple{T2}, Tuple{T1}, Tuple{DeviceArgs3D{T1, T2}, DeviceParticle3D{T1, T2}}} where {T1, T2}",href:"#MaterialPointVisualizer.particle2ply-Union{Tuple{T2}, Tuple{T1}, Tuple{DeviceArgs3D{T1, T2}, DeviceParticle3D{T1, T2}}} where {T1, T2}"},[e("span",{class:"jlbinding"},"MaterialPointVisualizer.particle2ply")],-1)),i[9]||(i[9]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">particle2ply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DeviceArgs3D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DeviceParticle3D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description:</strong></p><p>Convert the particle coordinates (data from <code>MaterialPointSolver.jl</code>) to a <code>.ply</code> file.</p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:r(()=>i[10]||(i[10]=[e("a",{href:"https://github.com/LandslideSIM/MaterialPointVisualizer.jl/blob/8ec80fa798f3f6bae8980387e60f41ff4b2a1a34/src/particle2surf.jl#L67-L73",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),e("details",f,[e("summary",null,[i[12]||(i[12]=e("a",{id:"MaterialPointVisualizer.particle2ply-Tuple{String, String}",href:"#MaterialPointVisualizer.particle2ply-Tuple{String, String}"},[e("span",{class:"jlbinding"},"MaterialPointVisualizer.particle2ply")],-1)),i[13]||(i[13]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[15]||(i[15]=a('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">particle2ply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hdf5_file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ply_dir</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description:</strong></p><p>Convert the particle coordinates (data from HDF5 file, which is generated by <code>MaterialPointSolver.jl</code>) to a <code>.ply</code> file.</p>',3)),t(s,{type:"info",class:"source-link",text:"source"},{default:r(()=>i[14]||(i[14]=[e("a",{href:"https://github.com/LandslideSIM/MaterialPointVisualizer.jl/blob/8ec80fa798f3f6bae8980387e60f41ff4b2a1a34/src/particle2surf.jl#L90-L97",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})]),i[21]||(i[21]=a('<p>The <code>particle2ply</code> function has four types of input parameters, as described above. The last one is used to generate a series of <code>.ply</code> files.</p><h2 id="Surface-reconstruction" tabindex="-1">Surface reconstruction <a class="header-anchor" href="#Surface-reconstruction" aria-label="Permalink to &quot;Surface reconstruction {#Surface-reconstruction}&quot;">​</a></h2><p>Here we will call <code>splashsurf</code> to execute. There are several parameters that need to be determined, whether it is a single <code>.ply</code> file or a series of <code>.ply</code> files (animation):</p>',3)),e("details",g,[e("summary",null,[i[16]||(i[16]=e("a",{id:"MaterialPointVisualizer.ply2surface-NTuple{4, Any}",href:"#MaterialPointVisualizer.ply2surface-NTuple{4, Any}"},[e("span",{class:"jlbinding"},"MaterialPointVisualizer.ply2surface")],-1)),i[17]||(i[17]=l()),t(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[19]||(i[19]=a(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ply2surface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ply_dir, splash_dir, radius, num_threads; cube_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    surface_threshold</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, smoothing_length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Description:</strong></p><ul><li><p>radius: particle (primitive) radius should be half of the particle&#39;s diameter.</p></li><li><p>smoothing-length: It should be set around 1.2. The larger the value, the smoother the isosurface, but it will also artificially increase the fluid volume.</p></li><li><p>surface-threshold: It can be used to offset the increase in fluid volume caused by factors such as larger particle radius, and a threshold of 0.6 seems to work quite well.</p></li><li><p>cube-size: Typically, it should not exceed 1. If the results are rough or the runtime is long, start increasing or decreasing from between 0.5 to 0.75.</p></li></ul><hr><ul><li><p>半径：粒子(原始)半径，应该是粒子直径的一半</p></li><li><p>光滑长度：应围绕1.2设置。值越大，等值面越平滑，但也会人为地增加流体体积</p></li><li><p>表面阈值：可以用来抵消由于较大粒子半径等因素导致的流体体积增加,0.6的阈值似乎效果不错</p></li><li><p>立方体尺寸：通常不能大于1,如果结果粗糙或者运行时间长,从0.5~0.75之间开始增大或减小</p></li></ul>`,5)),t(s,{type:"info",class:"source-link",text:"source"},{default:r(()=>i[18]||(i[18]=[e("a",{href:"https://github.com/LandslideSIM/MaterialPointVisualizer.jl/blob/8ec80fa798f3f6bae8980387e60f41ff4b2a1a34/src/particle2surf.jl#L128-L145",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1})])])}const D=n(h,[["render",y]]);export{v as __pageData,D as default};
