#==========================================================================================+
|               MaterialPointVisualizer.jl: Post-processing for MPM in Julia               |
+------------------------------------------------------------------------------------------+
|  File Name  : hdf2pvd.jl                                                                 |
|  Description: convert h5 file into pvd animation in ParaView                             |
|  Programmer : Zenan Huo                                                                  |
|  Start Date : 01/01/2025                                                                 |
|  Affiliation: Risk Group, UNIL-ISTE                                                      |
|  Functions  : 1. animation() [2D & 3D]                                                   |
+==========================================================================================#

export animation

"""
    animation(conf::NamedTuple)

Description:
---
Generates animation by using the data from HDF5 file (2D/3D). 

`conf` is defined through [MaterialPointSolver.jl](https://github.com/LandslideSIM/MaterialPointSolver.jl) and 
by default includes the fields `prjdst` (project directory path) and `prjname` (project name). If the original `conf` 
is lost, please construct it yourself, for example: 

```julia
conf = (prjdst="path/to/your/project", prjname="project_name").
```

Note:
---
- Inside the function, use `prjdst/prjname.h5` as the path to the HDF5 file.
- This feature primarily provides animation support for HDF5 files generated by `MaterialPointSolver.jl`. 
If your HDF5 file is generated by other means, please refer to [WriteVTK.jl](https://github.com/JuliaVTK/WriteVTK.jl).
"""
@views function animation(conf::NamedTuple)
    @assert haskey(conf, :prjdst) "Missing `:prjdst` in conf"
    @assert isdir(getproperty(conf, :prjdst)) "`conf.prjdst` is not a valid directory"
    @assert haskey(conf, :prjname) "Missing `:prjname` in conf"
    h5_str = joinpath(conf.prjdst, "$(conf.prjname).h5")
    h5_file = isfile(h5_str) ? h5_str : throw(ArgumentError("Expected a h5 file path at $h5_str"))
    anim_path = joinpath(conf.prjdst, "animation"); mkpath(anim_path)
    pvd = paraview_collection(joinpath(conf.prjdst, "$(conf.prjname).pvd"))
    fid = h5open(h5_file, "r")
    required = ("time", "ξ")
    groups = Tuple{String,Float64}[]
    @inbounds for gname in keys(fid)
        gname == "grid" && continue
        grp = fid[gname]
        all(haskey(grp, k) for k in required) || continue
        push!(groups, (gname, read(grp["time"])))
    end; sort!(groups, by = last)
    isempty(groups) && @warn "No valid time-step groups found in $h5_str"

    p_total, p_iters = length(groups), 0
    t1, t_start = time(), time()
    @inbounds for (step, (gname, t)) in enumerate(groups)
        grp = fid[gname]
        coords = permutedims(read(grp["ξ"]))
        vtk_path = joinpath(anim_path, @sprintf("%08d", step))
        vtp_cls  = [MeshCell(PolyData.Verts(), [i]) for i in 1:size(coords, 2)]
        vtk_grid(vtk_path, coords, vtp_cls; compress=true, append=false, ascii=false) do vtk
            for name in keys(grp)
                name in ("ξ", "time") && continue
                data = read(grp[name])
                data = ndims(data) == 2 ? permutedims(data) : data
                vtk[name] = data
            end
            pvd[t] = vtk # current simulation time
        end

        t2 = time(); if t2 - t1 > 3.0
            percen = "animation (.pvd): " * @sprintf("%6.2f%%", (p_iters / p_total) * 100)
            eta = "eta: " * format_seconds((p_total - p_iters) / (p_iters / (t2 - t_start)))
            invo_str = "   \e[1;32m⇌\e[0m   "
            info_con = "\e[1;32m[ Info: \e[0m"
            print(stdout, "\r\e[2K"); print(stdout, info_con * percen * invo_str * eta)
            t1 = t2
        end
        p_iters += 1; p_iters + 1 ≥ p_total && println()
    end
    close(pvd) # close Paraview collection
    _grid2vtr(fid, joinpath(conf.prjdst, "grid.vtr"))
    close(fid) # close HDF5 文件
end

@views function _grid2vtr(fid, out_file::String)
    @assert haskey(fid, "grid") "HDF5 file does not contain group 'grid'"
    g = fid["grid"]
    h = read(g["h"])[]
    x1, x2 = read(g["x1"])[], read(g["x2"])[]
    y1, y2 = read(g["y1"])[], read(g["y2"])[]
    xs, ys = collect(x1:h:x2), collect(y1:h:y2)
    if haskey(g, "z1") && haskey(g, "z2")
        z1, z2  = read(g["z1"])[], read(g["z2"])[]
        zs = collect(z1:h:z2)
        vtr = vtk_grid(out_file, xs, ys, zs; compress=true, append=false, ascii=false)
    else
        vtr = vtk_grid(out_file, xs, ys; compress=true, append=false, ascii=false)
    end
    vtr["h"] = h
    close(vtr)
end